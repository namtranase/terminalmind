#!/bin/bash

# Get the directory of the current script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"

EXTRACT_PDF_SCRIPT="$SCRIPT_DIR/extract_pdf_content.py"
FETCH_ARTICLE_SCRIPT="$SCRIPT_DIR/fetch_article_content.py"
PROMPT_FILE="$SCRIPT_DIR/prompt.txt"
TEMICORE="$SCRIPT_DIR/temicore"

# Source the configuration setup script
source "$SCRIPT_DIR/config_setup.sh"

# Function to validate if the model path ends with .gguf
validate_model_path() {
    if [[ $1 != *.gguf ]]; then
        echo "temi only supports .gguf models for now."
        exit 1
    fi
}

show_help() {
    echo -e "\033[1mUsage:\033[0m"
    echo "  temi [COMMAND] [ARGUMENTS]... [OPTIONS]"
    echo
    echo -e "\033[1mCommands:\033[0m"
    echo "  summary|summarize    Summarize the content from a given URL."
    echo "  RAG|retrieve|Retrieve KEYWORD  Retrieve information given keyword from a PDF file."
    echo "  change_model    Change the model configuration."
    echo "  update_config FILE    Update the configuration with the given JSON file."
    echo
    echo -e "\033[1mOptions:\033[0m"
    echo "  --help    Show this help message and exit."
    echo
    echo -e "\033[1mExamples:\033[0m"
    echo "  temi summary https://example.com/article"
    echo "  temi retrieve with keyword: test, path/to/file.pdf"
    echo "  temi change_model"
    echo "  temi update_config path/to/config.json"
    echo
    echo "For more information, visit: https://github.com/namtranase/terminalmind"
    echo
    echo -e "\033[1mNote:\033[0m Replace [COMMAND] with one of the commands above,"
    echo "and [ARGUMENTS]... with the appropriate input for the command."
}

# Check for --help option
if [[ "$1" == "--help" ]]; then
    show_help
    exit 0
fi

# Function to extract URL from input
extract_url() {
    echo "$1" | grep -o 'http[s]*://[^ ]*'
}

# Function to extract PDF file path or URL from input
extract_pdf_path() {
    # Use grep with a regular expression to find paths or URLs ending in .pdf
    # This pattern matches both local paths and URLs
    echo "$1" | grep -o -E '(http[s]*://[^ ]*\.pdf|/[^ ]*\.pdf)'
}

# Function to extract the keyword phrase enclosed in curly braces {}
extract_keyword() {
    local input=$1
    local keyword=""

    # Extract the keyword following 'keyword:' and ending at the comma
    if echo "$input" | grep -q 'keyword:'; then
        keyword=$(echo "$input" | grep -o 'keyword: [^,]*' | cut -d':' -f2 | cut -d',' -f1 | xargs)
    fi

    echo "$keyword"
}

change_model() {
    echo "Please enter the new absolute path to your .gguf model file:"
    read -r new_model_path

    # Validate the provided model path
    validate_model_path "$new_model_path"

    # Save the new model path to the configuration file
    echo "MODEL_PATH=\"$new_model_path\"" > "$CONFIG_FILE"
    MODEL_PATH="$new_model_path"

    echo "Model path changed successfully."
}

# Check if the user wants to change the model
if [[ $1 == "change_model" ]]; then
    change_model
    exit 0
fi

# Check if the model path is set and valid
if [ -z "$MODEL_PATH" ] || [ ! -f "$MODEL_PATH" ]; then
    echo "Model file not found. Please enter the absolute path to your .gguf model file:"
    read -r user_model_path

    # Validate the provided model path
    validate_model_path "$user_model_path"

    # Save the model path to the configuration file
    echo "MODEL_PATH=\"$user_model_path\"" > "$CONFIG_FILE"
    MODEL_PATH="$user_model_path"
fi

# Concatenate all input arguments into a single string
input_string="$*"

if [[ ! $input_string =~ summary|summarize|RAG|Retrieve|retrieve ]]; then
    output=$($TEMICORE 2>/dev/null -m $MODEL_PATH -n 128 -t 0.8 -p "<s>[INST] $* - Write at most 50 words in new line [/INST]" | sed 's/\[INST\].*\[\/INST\]//g')
    echo "$output"
# Check if input contains 'summary' or 'summarize'
elif [[ $input_string =~ summary|summarize ]]; then
    # Extract URL from input
    url=$(extract_url "$input_string")
    if [ -z "$url" ]; then
        echo "No URL found in input."
        exit 1
    fi

    # Fetch article content using Python script
    content=$(python3 $FETCH_ARTICLE_SCRIPT "$url")

    # Check if content was successfully fetched
    if [[ $content == Error:* ]]; then
        echo "$content"
        exit 1
    fi
    # Prepare the prompt and write to a file
    {
        echo "<s>[INST] Summary the content: ${content} - Write at most 50 words in new line [/INST]"
    } &> $PROMPT_FILE


    # Call LLM model with content
    output=$($TEMICORE 2>/dev/null -m $MODEL_PATH -n 128 -t 0.8 --file $PROMPT_FILE | sed 's/\[INST\].*\[\/INST\]//g')
    echo "$output"

# RAG with PDF Input Use Case
elif [[ $input_string =~ RAG|retrieve|Retrieve ]]; then
    pdf_path=$(extract_pdf_path "$input_string")
    if [ -z "$pdf_path" ]; then
        echo "No PDF file path found in input."
        exit 1
    fi
    keyword=$(extract_keyword "$input_string")
    if [ -z "$keyword" ]; then
        echo "No keyword found in input."
        exit 1
    fi
    echo "PDF file: $pdf_path"
    echo "Search keywork: $keyword"
    content=$(python3 $EXTRACT_PDF_SCRIPT "$pdf_path")
    if [[ -z $content ]]; then
        echo "Failed to extract text from the PDF."
        exit 1
    fi
    # Prepare the prompt and write to a file
    {
        echo "<s>[INST] Get the ${keyword} information from: ${content} - Write at most 50 words in new line [/INST]"
    } &> $PROMPT_FILE

    # Call LLM model with content
    output=$($TEMICORE 2>/dev/null -m $MODEL_PATH -n 128 -t 0.8 --file $PROMPT_FILE | sed 's/\[INST\].*\[\/INST\]//g')
    echo "$output"

# Other cases or default behavior
else
    # Handle any other cases or provide a default behavior
    echo "Command not recognized. Please provide a valid command."
fi
